#!/usr/bin/env ruby

require 'CSV'
require 'json'
require 'scouting'

CACHE_TEAM_DATA = true

begin
  # Prompt for event key
  print "Enter event code (default MRCMP): "
  input = gets.chomp
  input = "mrcmp" if input.empty?
  @event = "2014" + input.downcase

  # Get the list of teams attending the event
  puts "Retrieving team list for #{@event}"
  @teams = TBA.get_event_teams @event
  @teams.sort_by! { |t| t['team_number'] }
rescue TBA::NotFoundError
  puts "Error: Invalid event code"
  retry
end

# Retrive match data for the teams
puts "Retrieving team data from TBA..."
@data = @teams.map do |t|
  if CACHE_TEAM_DATA
    filename = "data/teams/#{t['team_number']}.json"

    # Check if we already have data on a given team
    if File.exists? filename
      puts "Team #{t['team_number']}: #{t['nickname']} (Cached)"
      data = JSON.parse File.read(filename)
    else
      # Fetch the data from TBA and save it for future use
      puts "Team #{t['team_number']}: #{t['nickname']}"
      data = TBA.get_team t['team_number']
      File.write filename, data.to_json
    end
  else
    puts "Team #{t['team_number']}: #{t['nickname']}"
    data = TBA.get_team t['team_number']
  end
  data
end

CSV.open("data/events/#{@event}.csv", 'w') do |csv|
  # Header row
  csv << ['Team #', 'Name', 'Wins', 'Losses', 'Ties', 'Win/Loss Ratio', 'High Score (Q)', 'Average Score (Q)', 'High Score (E)', 'Average Score (E)', 'Awards']
  @data.each do |t|
    row = []
    row << t['team_number']
    row << t['nickname']
    
    wins = losses = ties = 0
    qual_scores = []
    elim_scores = []
    awards = []
    t['events'].each do |e|
      e['matches'].each do |m|
        # Determine which alliance the team is on
        isRed = m['alliances']['red']['teams'].include? t['key']

        # Grab the team's score
        team_score = opponent_score = 0
        if isRed
          team_score = m['alliances']['red']['score']
          opponent_score = m['alliances']['blue']['score']
        else
          team_score = m['alliances']['blue']['score']
          opponent_score = m['alliances']['red']['score']
        end

        if m['comp_level'] == 'qm'
          qual_scores << team_score
        else
          elim_scores << team_score
        end

        # Determine if match was a win, loss, or tie
        if team_score > opponent_score
          wins += 1
        elsif team_score < opponent_score
          losses += 1
        else
          ties += 1
        end
      end

      # Grab award info
      e['awards'].each { |a| awards << "#{a['name']} (#{a['event_key'][4..-1].upcase})" }
    end

    row << wins
    row << losses
    row << ties
    row << (wins.to_f / losses.to_f).round(2)
    row << qual_scores.max
    row << ((qual_scores.inject(0) { |sum, score| sum += score }) / qual_scores.count)
    if elim_scores.count > 0
      row << elim_scores.max
      row << ((elim_scores.inject(0) { |sum, score| sum += score }) / elim_scores.count)
    else
      row << 0
      row << 0
    end
    row << awards.join('; ')
    
    csv << row
  end
end

puts "Output written to 'data/events/#{@event}.csv'"
